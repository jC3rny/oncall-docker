---
name: build & push Docker image [linkedin]

on:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  schedule:
    # - cron:  "30 */12 * * *"
    - cron:  "0 8 * * *"
  workflow_dispatch:


env:
  DOCKERHUB_URL: "https://hub.docker.com/v2/repositories"
  DOCKERHUB_REPO: "jc3rny"
  DOCKERHUB_IMAGE_NAME: "oncall"
  GIT_LS_REMOTE_CMD: "git -c 'versionsort.suffix=-' ls-remote --refs --sort='version:refname' --tags"
  ONCALL_REPO_URL: "https://github.com/linkedin/oncall.git"


jobs:
  docker_image:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        os: [ "bionic", "focal" ]
    
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'linkedin/oncall'


      - name: Set Env
        run: |
          DOCKERHUB_PUSHED_TAGS="$(curl -sSL -X GET "${{ env.DOCKERHUB_URL }}/${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE_NAME }}/tags/?page_size=100" | jq -r '.results[].name')"
          ONCALL_DOCKER_TAG="$(${{ env.GIT_LS_REMOTE_CMD }} ${{ env.ONCALL_REPO_URL }} | cut --delimiter='/' --fields=3 | tail --lines=1)"
          UBUNTU_IMAGE_TAG="$(curl -sSL -X GET "${{ env.DOCKERHUB_URL }}/library/ubuntu/tags/?page_size=100" | jq -r '.results[] | select(.name | test("${{ matrix.os }}")) .name' | sort | tail --lines=1)"

          BUILD_IMAGE_TAG_FULL="${ONCALL_DOCKER_TAG}-${UBUNTU_IMAGE_TAG}-linkedin"
          
          if [ -z "$(grep -E "^${BUILD_IMAGE_TAG_FULL}$" <<< ${DOCKERHUB_PUSHED_TAGS})" ]; then
              echo DOCKER_BUILD_CONTINUE="true" >> $GITHUB_ENV
          else
              echo DOCKER_BUILD_CONTINUE="false" >> $GITHUB_ENV
          fi
          
          echo ONCALL_DOCKER_TAG=${ONCALL_DOCKER_TAG} >> $GITHUB_ENV
          echo UBUNTU_IMAGE_TAG=${UBUNTU_IMAGE_TAG} >> $GITHUB_ENV
          echo BUILD_IMAGE_TAG_FULL=${BUILD_IMAGE_TAG_FULL} >> $GITHUB_ENV
          echo BUILD_IMAGE_TAG_BASE="${ONCALL_DOCKER_TAG}-${{ matrix.os }}-linkedin" >> $GITHUB_ENV
          

      - name: DEBUG
        run: |
          echo "ONCALL_DOCKER_TAG:      ${{ env.ONCALL_DOCKER_TAG }}"
          echo "UBUNTU_IMAGE_TAG:       ${{ env.UBUNTU_IMAGE_TAG }}"
          echo "BUILD_IMAGE_TAG_FULL:   ${{ env.BUILD_IMAGE_TAG_FULL }}"
          echo "BUILD_IMAGE_TAG_BASE:   ${{ env.BUILD_IMAGE_TAG_BASE }}"


      - name: Update Dockerfile
        if: env.DOCKER_BUILD_CONTINUE == 'true'
        run: |
          sed -i 's/\(FROM\) ubuntu:.*$/\1 ubuntu:${{ env.UBUNTU_IMAGE_TAG }}/' ./Dockerfile


      - name: Set up Docker Buildx
        if: env.DOCKER_BUILD_CONTINUE == 'true'
        uses: docker/setup-buildx-action@v1
      

      - name: Login to DockerHub
        if: env.DOCKER_BUILD_CONTINUE == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      

      - name: Build and push
        if: env.DOCKER_BUILD_CONTINUE == 'true'
        uses: docker/build-push-action@v2
        with:
          context: "."
          file: "./Dockerfile"
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.BUILD_IMAGE_TAG_FULL }}
            ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.BUILD_IMAGE_TAG_BASE }}